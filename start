let attractor;
let particles = [];
let strengthSlider;

function setup() {
  createCanvas(400, 400);
  
  attractor = new Attractor(width / 2, height / 2);
  strengthSlider = createSlider(0, 1, 0.4, 0.01);
  strengthSlider.position(width + 20, height / 2 - strengthSlider.height / 2);
}

function draw() {
  background(220);

  attractor.setStrength(strengthSlider.value());

  attractor.calculateAttraction();

  attractor.display();

  for (let i = 0; i < particles.length; i++) {
    let force = attractor.calculateAttractionForce(particles[i]);
    particles[i].applyForce(force);
    particles[i].update();
    particles[i].display();
  }
}

function mouseMoved() {
  let particle = new Particle(mouseX, mouseY);
  particles.push(particle);
}

class Attractor {
  constructor(x, y) {
    this.position = createVector(x, y);
    this.mass = 20;
    this.G = 0.4; 
    this.strength = 0.4; 
  }

  setStrength(s) {
    this.strength = s;
  }

  calculateAttractionForce(particle) {
    let force = p5.Vector.sub(this.position, particle.position);
    let distance = force.mag();
    distance = constrain(distance, 5, 25);
    force.normalize();

    let strength = (this.G * this.mass * particle.mass) / (distance * distance);
    force.mult(strength * this.strength);

    return force;
  }

  calculateAttraction() {
    for (let i = 0; i < particles.length; i++) {
      let force = this.calculateAttractionForce(particles[i]);
      particles[i].applyForce(force);
    }
  }

  display() {
    fill(255, 0, 0);
    ellipse(this.position.x, this.position.y, this.mass * 2, this.mass * 2);
  }
}

class Particle {
  constructor(x, y) {
    this.position = createVector(x, y);
    this.velocity = createVector(0, 0);
    this.acceleration = createVector(0, 0);
    this.mass = 1;
    this.color = color(random(255), random(255), random(255));
  }

  applyForce(force) {
    let f = force.copy().div(this.mass);
    this.acceleration.add(f);
  }

  update() {
    this.velocity.add(this.acceleration);
    this.position.add(this.velocity);
    this.acceleration.mult(0);
  }

  display() {
    fill(this.color);
    ellipse(this.position.x, this.position.y, 10, 10);
  }
}
